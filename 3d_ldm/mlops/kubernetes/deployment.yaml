# Kubernetes namespace for 3D LDM deployment
apiVersion: v1
kind: Namespace
metadata:
  name: 3d-ldm
  labels:
    app: 3d-latent-diffusion
    environment: production
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: 3d-ldm-config
  namespace: 3d-ldm
data:
  config.json: |
    {
      "patch_size": [64, 64, 64],
      "num_inference_steps": 100,
      "guidance_scale": 7.5,
      "max_batch_size": 4,
      "model_path": "/app/models/3d_ldm_model.pth"
    }
  
  environment.json: |
    {
      "model_dir": "/app/models",
      "output_dir": "/app/outputs",
      "log_level": "INFO",
      "api_timeout": 300
    }
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: 3d-ldm-secrets
  namespace: 3d-ldm
type: Opaque
data:
  # Base64 encoded values
  api-key: "your-api-key-base64-encoded"
  azure-storage-key: "your-storage-key-base64-encoded"
---
# PersistentVolumeClaim for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: 3d-ldm-models-pvc
  namespace: 3d-ldm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd  # Adjust based on your cluster
---
# PersistentVolumeClaim for outputs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: 3d-ldm-outputs-pvc
  namespace: 3d-ldm
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard
---
# Deployment for the 3D LDM API server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: 3d-ldm-api
  namespace: 3d-ldm
  labels:
    app: 3d-ldm-api
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: 3d-ldm-api
  template:
    metadata:
      labels:
        app: 3d-ldm-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: 3d-ldm-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: 3d-ldm-api
        image: your-registry/3d-ldm:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: MODE
          value: "api"
        - name: PORT
          value: "8000"
        - name: WORKERS
          value: "1"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        resources:
          requests:
            cpu: "2"
            memory: "8Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "4"
            memory: "16Gi"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
        - name: outputs-volume
          mountPath: /app/outputs
        - name: config-volume
          mountPath: /app/config
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: 3d-ldm-models-pvc
      - name: outputs-volume
        persistentVolumeClaim:
          claimName: 3d-ldm-outputs-pvc
      - name: config-volume
        configMap:
          name: 3d-ldm-config
      - name: secrets-volume
        secret:
          secretName: 3d-ldm-secrets
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
      nodeSelector:
        accelerator: nvidia-tesla-v100  # Adjust based on your GPU nodes
---
# Service for the API
apiVersion: v1
kind: Service
metadata:
  name: 3d-ldm-api-service
  namespace: 3d-ldm
  labels:
    app: 3d-ldm-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: 3d-ldm-api
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: 3d-ldm-api-hpa
  namespace: 3d-ldm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: 3d-ldm-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: 3d-ldm-service-account
  namespace: 3d-ldm
---
# Role for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: 3d-ldm
  name: 3d-ldm-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: 3d-ldm-rolebinding
  namespace: 3d-ldm
subjects:
- kind: ServiceAccount
  name: 3d-ldm-service-account
  namespace: 3d-ldm
roleRef:
  kind: Role
  name: 3d-ldm-role
  apiGroup: rbac.authorization.k8s.io